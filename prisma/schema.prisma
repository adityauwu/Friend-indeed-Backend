generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Therapist {
  id              String                @id @default(uuid())
  name            String?
  email           String                @unique
  imageUrl        String?
  bookingUrl      String?
  about           String?
  rating          Int?
  experience      Int?
  onboarded       Boolean?              @default(false)
  consultationFee Int?
  createdAt       DateTime?             @default(now())
  updatedAt       DateTime?             @updatedAt
  active          Boolean               @default(true)
  feedback        Feedback[]
  categories      TherapistCategories[]
  qualification   String[]
  booking         Booking[]

}

model TherapistCategories {
  id          String     @id @default(uuid())
  therapistId String?
  categoryId  String?
  experience  Int        @default(0)
  category    Category?  @relation(fields: [categoryId], references: [id])
  therapist   Therapist? @relation(fields: [therapistId], references: [id])
}

model Patient {
  id             String        @id @default(uuid())
  name           String
  email          String        @unique
  imageUrl       String?
  active         Boolean?      @default(true)
  createdAt      DateTime?     @default(now())
  updatedAt      DateTime?     @updatedAt
  feedback       Feedback[]
  booking        Booking[]
  subscriptionId String?
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])

}

model Category {
  id         String                @id @default(uuid())
  name       String                @unique
  active     Boolean?              @default(true)
  createdAt  DateTime?             @default(now())
  updatedAt  DateTime?             @updatedAt
  therapists TherapistCategories[]
}

model Feedback {
  id          String    @id @default(uuid())
  patientId   String
  therapistId String
  rating      Int
  comment     String
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  patient     Patient   @relation(fields: [patientId], references: [id])
  therapist   Therapist @relation(fields: [therapistId], references: [id])

  @@unique([patientId, therapistId])
}

model Subscription {
  id        String    @id @default(uuid())
  fee       Int
  active    Boolean?  @default(true)
  patientId String?
  patient   Patient[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

}

model Booking {
  id          String    @id @default(uuid())
  status      Status    @default(PENDING)
  fees        Int
  orderId     String?   @unique()
  patientId   String
  therapistId String
  patient     Patient   @relation(fields: [patientId], references: [id])
  therapist   Therapist @relation(fields: [therapistId], references: [id])
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

model Conversation {
  id         String    @id @default(uuid())
  content    String    
  senderId   String
  recieverId String
  createdAt  DateTime? @default(now())
  readAt     String?
}

model HabitProgress {
  id          String   @id @default(uuid())
  answer1     String
  answeredAt  DateTime
  treatmentId String
}

model NewsletterSubs {
  id    String @id @default(uuid())
  email String
  name  String
}



enum Status {
  PENDING
  BOOKED
  COMPLETED
  CANCELLED
}
